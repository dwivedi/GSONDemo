

Steps to Parser JSON using GSON Library,

1.) Download gson-2.2.2.jar from "http://code.google.com/p/google-gson/downloads/list" and include in your project as Library.
2.) Example - 

	Suppose we need to parse below JSON,
	
	{
		"result":
				[
					{"name" : "lalit"}
				], 
				"someKey": "someValue"
	}
	
	
	So, in the above JSON we have a JSONObject that contains a JSONArray(result) and a key-value data.
	
3.) Create Pseudo Classes for the Above JSON, Always start from inner JSONObject's/JSONArray's.
   
	1.) TestResult - Object inside JSONArray.
	
		public class TestResult {

			private String name;

			public String getName() {
				return name;
			}

			public void setName(String key) {
				this.name = key;
			}
		}
	
    2.) TestObject - Parent Object which will contain a List of TestResult.
	
		public class TestObject {

			private List<TestResult> result = new ArrayList<TestResult>();
			private String someKey;

			public String getSomeKey() {
				return someKey;
			}

			public void setSomeKey(String someKey) {
				this.someKey = someKey;
			}

			public List<TestResult> getResult() {
				return result;
			}

			public void setResult(List<TestResult> result) {
				this.result = result;
			}
		}
		
		
4.) Final Step is to create the instance of Gson class and use its fromJson(String json, Class<TestObject> classOfT) method to get the Result in your Bean Classes.
	
	 Gson gson = new Gson();
     TestObject mTest = gson.fromJson(json, TestObject.class);
	 
	 Now, you have your Classes filled with the Result/Data of JSON string, you can iterate through each to get its value.
	 
	  ArrayList<TestResult> mResult = (ArrayList<TestResult>) mTest.getResult();
      
	  for(TestResult t : mResult){
        Log.d("Name", t.getName());
      }
      Log.d("Name", mTest.getSomeKey());
	  
	  

	  ******* Benefits of using Gson over Native JSON.	******
	  
1.) You don't have to iterate through each value and set to Bean Class.
2.) Gson is very clear and easy to implement when you have Complex JSON response.
	